package SPVM::JSON {
  use SPVM::Hash;
  use SPVM::List;
  use SPVM::Int;
  use SPVM::Long;
  use SPVM::Double;
  use SPVM::JSON::Bool;
  use SPVM::Math::BigDecimal;
  use SPVM::Math::BigInteger;
  use SPVM::Math::StringToNumber;

  has indent : public int;
  has indent_length : public int;
  has space_before : public int;
  has space_after : public int;
  has canonical : public int;
  has relaxed : public int;
  has num_policy : public int;

  enum {
    DEFAULT,
    ALLOW_LONG,
    ALLOW_BIGNUM,
  }

  sub _croak_with_dump_remain : void ($croak_message : string, $s : string, $start : int, $end : int) {
    croak $croak_message . "\nRemains... '" . (string)(sliceb((byte [])$s, $start, $end - $start)) . "'";
  }

  sub _skip_comment : void ($s : string, $i : int&, $end : int) {
    my $comment = 0;
    for (; $$i < $end ; ++$$i) {
      if ($comment == 1 && $s->[$$i] == '\n') {
        return;
      }
      if ($comment == 2) {
        unless ($s->[$$i] == '*') {
          next;
        }
        ++$$i;
        unless ($$i < $end) {
          return; # no */ is allowed
        }
        if ($s->[$$i] == '/') {
          $comment = 0;
        }
      }
      elsif ($s->[$$i] == '#') {
        $comment = 1;
      }
      elsif ($s->[$$i] == '/') {
        ++$$i;
        unless ($$i < $end) {
          _croak_with_dump_remain("Unexpected token '/'", $s, $$i, $end);
        }
        if ($s->[$$i] == '/') {
          $comment = 1;
        }
        elsif ($s->[$$i] == '*') {
          $comment = 2;
        }
        else {
          _croak_with_dump_remain("Unexpected token '/'", $s, $$i, $end);
        }
      }
      elsif ($comment == 0) {
        return;
      }
    }
  }

  sub _skip_spaces : void ($self : self, $s : string, $i : int&, $end : int) {
    for (; 1 ; ++$$i) {
      if ($self->{relaxed}) {
        _skip_comment($s, $i, $end);
      }
      if ($$i == $end) {
        return;
      }
      unless ($s->[$$i] == ' ' || $s->[$$i] == '\n' || $s->[$$i] == '\t' || $s->[$$i] == '\r') {
        last;
      }
    }
  }

  sub _skip_spaces_at_not_end : void ($self : self, $s : string, $i : int&, $end : int) {
    $self->_skip_spaces($s, $i, $end);
    if ($$i == $end) {
      _croak_with_dump_remain("Incomplete JSON", $s, $$i, $end);
    }
  }

  sub _expect_token : void ($s : string, $i : int&, $end : int, $expected : string) {
    my $length = length $expected;
    unless ($$i + $length <= $end) {
      _croak_with_dump_remain("Expected token: $expected doesn't exist", $s, $$i, $end);
    }
    my $begin = $$i;
    while (1) {
      unless ($s->[$$i] == $expected->[$$i - $begin]) {
        _croak_with_dump_remain("Expected token: $expected doesn't exist", $s, $$i, $end);
      }
      ++$$i;
      if ($$i - $begin == $length) {
        last;
      }
    }
  }

  sub _decode_string : string ($self : self, $s : string, $i : int&, $end : int) {
    my $chars = SPVM::List->new;
    _expect_token($s, $i, $end, "\"");
    my $special_char_expected = 0;
    while (1) {
      if ($$i >= $end || (!$special_char_expected && $s->[$$i] == '"')) {
        last;
      }
      my $got_char = $s->[$$i];
      if ($special_char_expected) {
        switch ((int)$got_char) {
          case 34: # '"'
          case 92: # '\\'
            $chars->push(SPVM::Int->new($got_char));
            last;
          case 116: # 't'
          $chars->push(SPVM::Int->new('\t'));
            last;
          case 110: # 'n'
            $chars->push(SPVM::Int->new('\n'));
            last;
          case 114: # 'r'
            $chars->push(SPVM::Int->new('\r'));
            last;
          default:
            _croak_with_dump_remain("Undefined special char", $s, $$i, $end);
        }
        $special_char_expected = 0;
      }
      elsif ($got_char == '\\') {
        $special_char_expected = 1;
      }
      else {
        if (!$self->{relaxed} && $got_char == '\t') {
          _croak_with_dump_remain("Literal ASCII tab characters are not allowed in string", $s, $$i, $end);
        }
        $chars->push(SPVM::Int->new($got_char));
      }
      ++$$i;
    }
    if ($$i == $end) {
      _croak_with_dump_remain("Invalid string. end-quote doesn't exist", $s, $$i, $end);
    }
    _expect_token($s, $i, $end, "\"");
    my $chars_length = $chars->length;
    my $value = new byte [$chars_length];
    for (my $k = 0; $k < $chars_length; ++$k) {
      my $got = ((SPVM::Int)$chars->shift)->val;
      $value->[$k] = (byte)$got;
    }
    return (string)$value;
  }

  # _decode_digits.which_part
  enum {
    _INT_PART,
    _DECIMAL_PART,
    _EXP_PART,
  }

  # _decode_digits.constraint
  enum {
    _ANYTHING_OK,
    _DIGIT_EXPECTED,
    _MINUS_OR_DIGIT_EXPECTED,
  }

  sub _decode_digits : object ($self : self, $s : string, $i : int&, $end : int) {
    # BigDecimalのdecodeは別にしたほうがいい
    my $begin = $$i;
    my $rng_int = [$begin, -1];
    my $rng_decimal = [-1, -1];
    my $rng_exp = [-1, -1];
    my $end_of_digits = -1;
    my $which_part = _INT_PART();
    my $constraint = _MINUS_OR_DIGIT_EXPECTED();
    if ($begin + 1 < $end && $s->[$begin] == '0' && $s->[$begin + 1] == '0') {
      _croak_with_dump_remain("Invalid number. Leading 0 is not allowed.", $s, $begin, $end);
    }
    while ($$i < $end) {
      if ('0' <= $s->[$$i] && $s->[$$i] <= '9') {
        ++$$i;
        $constraint = _ANYTHING_OK();
      }
      elsif ($s->[$$i] == '-') {
        ++$$i;
        unless ($constraint == _MINUS_OR_DIGIT_EXPECTED()) {
          _croak_with_dump_remain("Invalid number: Constraint mismatches.", $s, $$i, $end);
        }
        $constraint = _DIGIT_EXPECTED();
      }
      elsif ($s->[$$i] == '.') {
        unless ($constraint == _ANYTHING_OK()) {
          _croak_with_dump_remain("Invalid number: Constraint mismatches.", $s, $$i, $end);
        }
        $constraint = _DIGIT_EXPECTED();
        if ($which_part == _INT_PART()) {
          $which_part = _DECIMAL_PART();
          $rng_int->[1] = $$i;
          $rng_decimal->[0] = $$i + 1;
        }
        else {
          _croak_with_dump_remain("Invalid number.", $s, $$i, $end);
        }
        ++$$i;
      }
      elsif ($s->[$$i] == 'e' || $s->[$$i] == 'E') {
        unless ($constraint == _ANYTHING_OK()) {
          _croak_with_dump_remain("Invalid number: Constraint mismatches.", $s, $$i, $end);
        }
        $constraint = _MINUS_OR_DIGIT_EXPECTED();
        if ($which_part == _INT_PART()) {
          $which_part = _EXP_PART();
          $rng_int->[1] = $$i;
          $rng_exp->[0] = $$i + 1;
        }
        elsif ($which_part == _DECIMAL_PART()) {
          $which_part = _EXP_PART();
          $rng_decimal->[1] = $$i;
          $rng_exp->[0] = $$i + 1;
        }
        else {
          _croak_with_dump_remain("Invalid number.", $s, $$i, $end);
        }
        ++$$i;
        if ($$i + 1 < $end && $s->[$$i + 1] == '+') {
          ++$$i;
          ++$rng_exp->[0];
        }
      }
      else {
        $end_of_digits = $$i;
        last;
      }
    }
    unless ($constraint == _ANYTHING_OK()) {
      _croak_with_dump_remain("Invalid number: Constraint mismatches.", $s, $$i, $end);
    }
    if ($end_of_digits == -1) {
      $end_of_digits = $end;
    }

    if ($which_part == _INT_PART()) {
      $rng_int->[1] = $end_of_digits;
      my $int_part_str = sliceb((byte [])$s, $rng_int->[0], $rng_int->[1] - $rng_int->[0]);
      if ($self->{num_policy} == DEFAULT()) {
        return SPVM::Int->new(SPVM::Math::StringToNumber->from($int_part_str)->to_int);
      }
      elsif ($self->{num_policy} == ALLOW_LONG()) {
        return SPVM::Long->new(SPVM::Math::StringToNumber->from($int_part_str)->to_long);
      }
      else {
        return SPVM::Math::BigInteger->new($int_part_str);
      }
    }
    elsif ($which_part == _DECIMAL_PART()) {
      $rng_decimal->[1] = $end_of_digits;
      if ($self->{num_policy} == DEFAULT() || $self->{num_policy} == ALLOW_LONG()) {
        # TODO: Extract double decoding to StringToNumber
        my $int_part_str = sliceb((byte [])$s, $rng_int->[0], $rng_int->[1] - $rng_int->[0]);
        my $decimal_part_str = sliceb((byte [])$s, $rng_decimal->[0], $rng_decimal->[1] - $rng_decimal->[0]);
        my $int_part = SPVM::Math::StringToNumber->from($int_part_str)->to_int;
        my $decimal_part = SPVM::Math::StringToNumber->from($decimal_part_str)->to_int;
        return SPVM::Double->new($int_part + $decimal_part / pow(10.0, @$decimal_part_str));
      }
      else {
        return SPVM::Math::BigDecimal->new(
            sliceb((byte [])$s, $rng_int->[0], $rng_decimal->[1] - $rng_int->[0]));
      }
    }
    elsif ($which_part == _EXP_PART()) {
      $rng_exp->[1] = $end_of_digits;
      my $int_part_str = sliceb((byte [])$s, $rng_int->[0], $rng_int->[1] - $rng_int->[0]);
      my $decimal_part_str = "";
      if ($rng_decimal->[0] >= 0) {
        $decimal_part_str = sliceb((byte [])$s, $rng_decimal->[0], $rng_decimal->[1] - $rng_decimal->[0]);
      }
      my $exp_part_str = sliceb((byte [])$s, $rng_exp->[0], $rng_exp->[1] - $rng_exp->[0]);
      if ($self->{num_policy} == DEFAULT() || $self->{num_policy} == ALLOW_LONG()) {
        my $int_part = SPVM::Math::StringToNumber->from($int_part_str)->to_int;
        my $decimal_part = SPVM::Math::StringToNumber->from($decimal_part_str)->to_int;
        my $exp_part = SPVM::Math::StringToNumber->from($exp_part_str)->to_int;
        return SPVM::Double->new(
              $int_part     * pow(10.0, $exp_part)
            + $decimal_part * pow(10.0, $exp_part - length($decimal_part_str)));
      }
      else {
        my $exp = SPVM::Math::StringToNumber->from($exp_part_str)->to_int;
        $exp -= length($decimal_part_str);
        return SPVM::Math::BigDecimal->new_with_exp($int_part_str . $decimal_part_str, $exp);
      }
    }
  }

  sub _decode_true : SPVM::JSON::Bool ($self : self, $s : string, $i : int&, $end : int) {
    _expect_token($s, $i, $end, "true");
    return SPVM::JSON::Bool->TRUE;
  }

  sub _decode_false : SPVM::JSON::Bool ($self : self, $s : string, $i : int&, $end : int) {
    _expect_token($s, $i, $end, "false");
    return SPVM::JSON::Bool->FALSE;
  }

  sub _decode_hash : SPVM::Hash ($self : self, $s : string, $i : int&, $end : int) {
    my $hash = SPVM::Hash->new;
    my $has_element = 0;
    _expect_token($s, $i, $end, "{");
    while (1) {
      # end of hash
      $self->_skip_spaces_at_not_end($s, $i, $end);
      if ($s->[$$i] == '}') {
        last;
      }

      # comma
      if ($has_element) {
        _expect_token($s, $i, $end, ",");
        $self->_skip_spaces_at_not_end($s, $i, $end);
        # allow last comma
        if ($self->{relaxed} && $s->[$$i] == '}') {
          last;
        }
      }
      else {
        $has_element = 1;
      }

      # key
      my $key = $self->_decode_string($s, $i, $end);

      # separator
      $self->_skip_spaces_at_not_end($s, $i, $end);
      _expect_token($s, $i, $end, ":");

      # value
      $self->_skip_spaces_at_not_end($s, $i, $end);
      $hash->set($key, $self->_decode_value($s, $i, $end));
    }
    _expect_token($s, $i, $end, "}");
    return $hash;
  }

  sub _decode_list : SPVM::List ($self : self, $s : string, $i : int&, $end : int) {
    _expect_token($s, $i, $end, "[");
    my $list = SPVM::List->new;
    my $has_element = 0;
    while (1) {
      # end of list
      $self->_skip_spaces_at_not_end($s, $i, $end);
      if ($s->[$$i] == ']') {
        last;
      }

      # comma
      if ($has_element) {
        _expect_token($s, $i, $end, ",");
        $self->_skip_spaces_at_not_end($s, $i, $end);
        # allow last comma
        if ($self->{relaxed} && $s->[$$i] == ']') {
          last;
        }
      }
      else {
        $has_element = 1;
      }
      $list->push($self->_decode_value($s, $i, $end));
    }
    _expect_token($s, $i, $end, "]");
    return $list;
  }

  sub _decode_value : object ($self : self, $s : string, $i : int&, $end : int) {
    # objects
    $self->_skip_spaces_at_not_end($s, $i, $end);
    if ($s->[$$i] == '{') {
      return $self->_decode_hash($s, $i, $end);
    }
    elsif ($s->[$$i] == '[') {
      return $self->_decode_list($s, $i, $end);
    }

    # primitives
    elsif ($s->[$$i] == '"') {
      return $self->_decode_string($s, $i, $end);
    }
    elsif ('0' <= $s->[$$i] && $s->[$$i] <= '9' || $s->[$$i] == '-') {
      return $self->_decode_digits($s, $i, $end);
    }
    elsif ($s->[$$i] == 't') {
      return $self->_decode_true($s, $i, $end);
    }
    elsif ($s->[$$i] == 'f') {
      return $self->_decode_false($s, $i, $end);
    }

    # unknown token
    else {
      _croak_with_dump_remain("Unexpected token. ", $s, $$i, $end);
    }
  }

  sub _make_indent : string ($self : self, $depth : int) {
    unless ($depth > 0 && $self->{indent} && $self->{indent_length} > 0) {
      return "";
    }
    my $sum_length = $self->{indent_length} * $depth;
    my $indent_bytes = new byte [$sum_length];
    for (my $i = 0; $i < $sum_length; ++$i) {
      $indent_bytes->[$i] = ' ';
    }
    return (string)$indent_bytes;
  }

  # TODO: Use separated sort function from this module
  sub _sort_keys : void ($keys : string[]) {
    for (my $i = 0; $i < @$keys - 1; ++$i) {
      for (my $j = @$keys - 1; $j > $i; $j--) {
        if ($keys->[$j - 1] gt $keys->[$j]) {
          my $temp = $keys->[$j - 1];
          $keys->[$j - 1] = $keys->[$j];
          $keys->[$j] = $temp;
        }
      }
    }
  }

  sub _escape_string : string ($string : string) {
    my $length = length $string;
    my $chars = SPVM::List->new;
    for (my $i = 0; $i < $length; ++$i) {
      my $got_char = (int)($string->[$i]);
      my $special = -1;
      switch ($got_char) {
        case 9: # '\t'
          # Note: Decoded char from literal ASCII tab will be encoded with "\\t" (non-reversible).
          $special = 't';
          last;
        case 10: # '\n'
          $special = 'n';
          last;
        case 13: # '\r'
          $special = 'r';
          last;
        case 34: # '"'
          $special = '"';
          last;
        case 92: # '\\'
          $special = '\\';
          last;
        default: # FIXME: segmentation fault
      }
      if ($special == -1) {
        $chars->push(SPVM::Int->new($got_char));
      }
      else {
        $chars->push(SPVM::Int->new('\\'));
        $chars->push(SPVM::Int->new($special));
      }
    }
    my $chars_length = $chars->length;
    my $escaped = new byte [$chars_length];
    for (my $k = 0; $k < $chars_length; ++$k) {
      my $got = ((SPVM::Int)$chars->shift)->val;
      $escaped->[$k] = (byte)$got;
    }
    return (string)$escaped;
  }

  sub _encode_value : string ($self : self, $o : object, $depth : int) {
    # objects
    if ($o isa SPVM::Hash) {
      my $text = "";
      if ($self->{indent}) {
        $text .= $self->_make_indent($depth);
      }
      $text .= "{";
      if ($self->{indent}) {
        $text .= "\n";
      }
      my $hash = (SPVM::Hash)$o;
      my $keys = $hash->keys;
      if ($self->{canonical}) {
        _sort_keys($keys); # TODO: Use separated sort function from this module
      }
      for (my $i = 0; $i < @$keys; ++$i) {
        if ($i > 0) {
          $text .= ",";
          if ($self->{indent}) {
            $text .= "\n";
          }
        }
        if ($self->{indent}) {
          $text .= $self->_make_indent($depth + 1);
        }
        $text .= "\"" . $keys->[$i] . "\"";
        if ($self->{space_before}) {
          $text .= " ";
        }
        $text .= ":";
        if ($self->{space_after}) {
          $text .= " ";
        }
        unless ($hash->exists($keys->[$i])) {
          croak "Unexpected error. Not found key: " . $keys->[$i];
        }
        $text .= $self->_encode_value($hash->get($keys->[$i]), $depth + 1);
      }
      if ($self->{indent}) {
        $text .= "\n";
        $text .= $self->_make_indent($depth);
      }
      $text .= "}";
      return $text;
    }
    elsif ($o isa SPVM::List) {
      my $text = "";
      $text .= "[";
      if ($self->{indent}) {
        $text .= "\n";
      }
      my $list = (SPVM::List)$o;
      my $length = $list->length;
      for (my $i = 0; $i < $length; ++$i) {
        if ($i > 0) {
          $text .= ",";
          if ($self->{indent}) {
            $text .= "\n";
          }
        }
        if ($self->{indent}) {
          $text .= $self->_make_indent($depth + 1);
        }
        $text .= $self->_encode_value($list->get($i), $depth + 1);
      }
      if ($self->{indent}) {
        $text .= "\n";
        $text .= $self->_make_indent($depth);
      }
      $text .= "]";
      return $text;
    }
    # primitives
    elsif ($o isa string) {
      my $escaped = _escape_string((string)$o);
      return "\"" . $escaped . "\"";
    }
    elsif ($o isa SPVM::Int) {
      return (string)(((SPVM::Int)$o)->val);
    }
    elsif ($o isa SPVM::Long) {
      return (string)(((SPVM::Long)$o)->val);
    }
    elsif ($o isa SPVM::Double) {
      return (string)(((SPVM::Double)$o)->val);
    }
    elsif ($o isa SPVM::Math::BigInteger) {
      return ((SPVM::Math::BigInteger)$o)->to_string;
    }
    elsif ($o isa SPVM::Math::BigDecimal) {
      return ((SPVM::Math::BigDecimal)$o)->to_string;
    }
    elsif ($o isa SPVM::JSON::Bool) {
      if (((SPVM::JSON::Bool)$o)->val) {
        return "true";
      }
      else {
        return "false";
      }
    }
    else {
      croak "Unknown object type";
    }
  }

  sub _field_check : void ($self : self) {
    unless ($self->{num_policy} == DEFAULT() ||
        $self->{num_policy} == ALLOW_LONG() ||
        $self->{num_policy} == ALLOW_BIGNUM()) {
      croak "Not allowed value is set to num_policy field";
    }
  }

  sub new : SPVM::JSON () {
    my $json = new SPVM::JSON;
    $json->{indent} = 0;
    $json->{indent_length} = 0;
    $json->{space_before} = 0;
    $json->{space_after} = 0;
    $json->{relaxed} = 1;
    return $json;
  }

  sub encode : string ($self : self, $object : object) {
    $self->_field_check;
    unless ($object) {
      return "";
    }
    return $self->_encode_value($object, 0);
  }

  sub decode : object ($self : self, $json_text : string) {
    $self->_field_check;
    my $length = length $json_text;
    my $iter = 0;
    $self->_skip_spaces($json_text, \$iter, $length);
    if ($iter == $length) {
      return undef;
    }
    my $ret = $self->_decode_value($json_text, \$iter, $length);
    $self->_skip_spaces($json_text, \$iter, $length);
    unless ($iter == $length) {
      _croak_with_dump_remain("Not all json_text is decoded yet", $json_text, $iter, $length);
    }
    return $ret;
  }

  sub pretty : void ($self : self, $pretty : int) {
    if ($pretty) {
      $self->{indent} = 1;
      $self->{indent_length} = 3;
      $self->{space_before} = 1;
      $self->{space_after} = 1;
    }
    else {
      $self->{indent} = 0;
      $self->{indent_length} = 0;
      $self->{space_before} = 0;
      $self->{space_after} = 0;
    }
  }
}
